<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Reverie</title><description>Thoughts, stories and ideas by Rishi Kothari</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Reverie</title><link>http://localhost:2368/</link></image><generator>Ghost 3.2</generator><lastBuildDate>Sat, 11 Jan 2020 03:26:14 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>How Rust got to the top.</title><description>Technological design should focus on the people using it. Instead, we've optimized it for the machines that they're used on, instead of the other way around.</description><link>http://localhost:2368/how-rustlang-got-to-the-top/</link><guid isPermaLink="false">5e19315f8cdb11271cd92099</guid><category>Programming</category><dc:creator>Rishi Kothari</dc:creator><pubDate>Sat, 11 Jan 2020 02:29:14 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1514396609188-7890859d5225?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded>&lt;figure class="kg-card kg-bookmark-card kg-card-hascaption"&gt;&lt;a class="kg-bookmark-container" href="https://music.apple.com/ca/album/petal/968587126?i=968587135"&gt;&lt;div class="kg-bookmark-content"&gt;&lt;div class="kg-bookmark-title"&gt;‎Xxv by Broke For Free&lt;/div&gt;&lt;div class="kg-bookmark-description"&gt;Song · 4:00 min · 2014. Available with an Apple Music subscription. Try it free.&lt;/div&gt;&lt;div class="kg-bookmark-metadata"&gt;&lt;img class="kg-bookmark-icon" src="https://music.apple.com/favicon.ico" alt="How Rust got to the top."&gt;&lt;span class="kg-bookmark-publisher"&gt;Apple Music&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="kg-bookmark-thumbnail"&gt;&lt;img src="https://is3-ssl.mzstatic.com/image/thumb/Music3/v4/ed/26/ca/ed26cadf-83f5-1e46-a144-0246559c5d50/889211401642.jpg/1200x630wp.png" alt="How Rust got to the top."&gt;&lt;/div&gt;&lt;/a&gt;&lt;figcaption&gt;Music to listen to while reading this.&lt;/figcaption&gt;&lt;/figure&gt;&lt;img src="https://images.unsplash.com/photo-1514396609188-7890859d5225?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" alt="How Rust got to the top."&gt;&lt;p&gt;When I started programming in 2013, I didn't have &lt;em&gt;a clue&lt;/em&gt; where to begin. As a result, I did what a lot of people did: pick the easiest option.&lt;/p&gt;&lt;p&gt;Of course, in 2013, there weren't too many options for me.&lt;/p&gt;&lt;p&gt;iOS development was off the table, as I didn't have a Mac back then, and so was Windows development (I took one look at the C# docs, and I've &lt;em&gt;literally &lt;/em&gt;never looked back).&lt;/p&gt;&lt;p&gt;However, web development looked to be a pretty cool field to go into: I could do it on my laptop, and build products that were cross-compatible. But most importantly,&lt;strong&gt; it was easy.&lt;/strong&gt;&lt;/p&gt;&lt;figure class="kg-card kg-code-card"&gt;&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;p&amp;gt;Hello World&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;figcaption&gt;It was this simple to get started.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;However, as time progressed, the web world became very different. Times change, and now I regularly see fights break out at hackathons over which framework is the best (by the way, it's Angular). JavaScript has become a self-created monster, lacking nearly &lt;em&gt;any&lt;/em&gt; tools for structured, consistent programming and techniques.&lt;/p&gt;&lt;p&gt;As a result, I burned out. I didn't get the same rewarding feeling building something that I had when I was just starting out. I started to dread working with the tech stack that I had chosen; there were always too many things to keep track of, and not enough people to help out.&lt;/p&gt;&lt;p&gt;In hindsight, it wasn't the &lt;em&gt;easiness&lt;/em&gt; that brought me to web development, it was the human connection. In 2013, there were very few frameworks and library (that were viable for production code), and so everyone focused on a couple of things, and there was clear, consistent, human-centric design. This idea was echoed all throughout the ecosystem, from the languages to the library design and docs.&lt;/p&gt;&lt;p&gt;We've all but lost this humanity in web development, which is why I needed a refresher. &lt;/p&gt;&lt;p&gt;I quenched my thirst for this humanity in tech with mathematics and natural languages. Instead of studying code, I studied the dynamics that humans used to communicate, be it through English, French, or function notation.&lt;/p&gt;&lt;p&gt;Most of that studying was devoted to working on &lt;a href="https://github.com/rishiosaur/phi-design"&gt;Philang&lt;/a&gt; with &lt;a href="http://localhost:2368/how-rustlang-got-to-the-top/andrewgao.tech"&gt;Andrew Gao&lt;/a&gt; from Hack Club, but I got something else out of it: Rust.&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt;Rust is one of the fastest languages out there, just hovering near C and quite a far way away from C++. However, what makes it stand out is the fact that it has type safety, embedded systems compatibility, and a whole host of other factors.&lt;/blockquote&gt;&lt;p&gt;However, what made Rust stand out for me was the language itself. Like I said before, I was focusing on human-focused design at the time. Because of this, Rust struck me quite hard.&lt;/p&gt;&lt;p&gt;You see, Rust did what the web had done in the old days: crafted a well-knit community and put its developers first. But more importantly, its language was, quite frankly, beautiful.&lt;/p&gt;&lt;p&gt;Rust's syntax is incredibly human-centric, and variables are the smallest example of this.&lt;/p&gt;&lt;figure class="kg-card kg-code-card"&gt;&lt;pre&gt;&lt;code class="language-rust"&gt;// Mutable variable definition
let mut x = 5;

// Immutable variable definition
let y = 6;

// Constant
const z = 7;&lt;/code&gt;&lt;/pre&gt;&lt;figcaption&gt;The total amount of variable/constant keywords in Rust.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;You only really need 2 keywords, both of which are pretty self-explanatory. This type of design brought me back to when I was messing around with JS in elementary school, and I realized that &lt;em&gt;this &lt;/em&gt;was what I was looking for.&lt;/p&gt;&lt;p&gt;Rust has some of the most thoughtful syntax that I've come across in a long time, from implying that all variables should be immutable by default, to the way that garbage collection works.&lt;/p&gt;&lt;p&gt;Its success proves one thing: we've been working on optimizing our languages for computers so much that we've forgotten to optimize it for &lt;em&gt;ourselves.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Getting started with Epsilon</title><description>A beginner's guide to the Epsilon Library.</description><link>http://localhost:2368/beginner-epsilon/</link><guid isPermaLink="false">5e14d16c8cdb11271cd92022</guid><category>Mathematics</category><category>Programming</category><dc:creator>Rishi Kothari</dc:creator><pubDate>Thu, 09 Jan 2020 20:13:26 GMT</pubDate><media:content url="http://localhost:2368/content/images/2020/01/IMG_3208.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2020/01/IMG_3208.jpg" alt="Getting started with Epsilon"&gt;&lt;p&gt;If you've ever tried implementing a fairly large mathematical expression in JavaScript or the web, you know the pain.&lt;/p&gt;&lt;p&gt;Getting even a simple linear system to work with dynamic values can take &lt;em&gt;ages&lt;/em&gt;. It's incredibly difficult to get a solution that tru&lt;/p&gt;</content:encoded></item><item><title>Startup Development Log</title><description>A summary of the planning for Herd and Arcademy.</description><link>http://localhost:2368/herd-devlog-1/</link><guid isPermaLink="false">5e17490a8cdb11271cd92061</guid><category>Development</category><category>Startups</category><dc:creator>Rishi Kothari</dc:creator><pubDate>Thu, 09 Jan 2020 17:44:22 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1557682224-5b8590cd9ec5?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded/></item><item><title>Apps &amp; integrations</title><description>Work with all your favourite apps and tools or create your own custom integrations using the Ghost API.</description><link>http://localhost:2368/apps-integrations/</link><guid isPermaLink="false">5e14989f8cdb11271cd91f08</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Tue, 07 Jan 2020 14:41:36 GMT</pubDate><media:content url="https://static.ghost.org/v3.0.0/images/app-integrations.png" medium="image"/><content:encoded>&lt;h2 id="work-with-your-existing-tools"&gt;Work with your existing tools&lt;/h2&gt;&lt;img src="https://static.ghost.org/v3.0.0/images/app-integrations.png" alt="Apps &amp; integrations"&gt;&lt;p&gt;It's possible to connect your Ghost site to hundreds of the most popular apps and tools using integrations that take no more than a few minutes to setup.&lt;/p&gt;&lt;p&gt;Whether you need to automate workflows, connect your email list, build a community or embed products from your ecommerce store, our &lt;a href="https://ghost.org/integrations/"&gt;integrations library&lt;/a&gt; has got it all covered with hundreds of tutorials.&lt;/p&gt;&lt;figure class="kg-card kg-image-card kg-width-full"&gt;&lt;img src="https://static.ghost.org/v3.0.0/images/integrations-icons.png" class="kg-image" alt="Apps &amp; integrations"&gt;&lt;/figure&gt;&lt;h2 id="zapier"&gt;Zapier&lt;/h2&gt;&lt;p&gt;On top of this, you can connect your Ghost site to more than 1,000 external services using the official integration with &lt;a href="https://zapier.com"&gt;Zapier&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Zapier sets up automations with Triggers and Actions, which allows you to create and customise a wide range of connected applications.&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;Example&lt;/strong&gt;: When someone new subscribes to a newsletter on a Ghost site (Trigger) then the contact information is automatically pushed into MailChimp (Action).&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Here are the most popular Ghost&amp;lt;&amp;gt;Zapier automation templates:&lt;/strong&gt; &lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;script src="https://zapier.com/apps/embed/widget.js?services=Ghost&amp;container=true&amp;limit=8"&gt;&lt;/script&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;h2 id="custom-integrations"&gt;Custom integrations&lt;/h2&gt;&lt;p&gt;At the heart of Ghost sits a robust JSON API – designed to create, manage and retrieve content with ease. &lt;/p&gt;&lt;p&gt;It's possible to create custom Ghost integrations with dedicated API keys and webhooks from the Integrations page within Ghost Admin. &lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="https://static.ghost.org/v3.0.0/images/integrations-and-webhooks-in-ghost.png" class="kg-image" alt="Apps &amp; integrations"&gt;&lt;/figure&gt;&lt;p&gt;Beyond that, the API allows you to build entirely custom publishing apps. You can send content from your favourite desktop editor, build a custom interface for handling editorial workflow or use Ghost as a full headless CMS with a custom front-end.&lt;/p&gt;&lt;p&gt;The Ghost API is &lt;a href="https://ghost.org/docs/api/"&gt;thoroughly documented&lt;/a&gt; and straightforward to work with for developers of almost any level. &lt;/p&gt;&lt;h2 id="final-step-themes"&gt;Final step: Themes&lt;/h2&gt;&lt;p&gt;Alright, on to the last post in our welcome-series! If you're curious about creating your own Ghost theme from scratch, &lt;a href="http://localhost:2368/themes/"&gt;find out how that works&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>